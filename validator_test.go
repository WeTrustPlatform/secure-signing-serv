package main

import (
	"math/big"
	"reflect"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

func Test_validate(t *testing.T) {
	t.Run("Can validate a transaction", func(t *testing.T) {
		tx := types.NewTransaction(
			1,
			common.HexToAddress("0x5597285BbE81BaF351e2C0884e9a5f4416958862"),
			big.NewInt(1),
			21000,
			big.NewInt(10000000000),
			[]byte("abcd"),
		)

		rules := `
function validate(tx)
	return tx.to == "0x5597285BbE81BaF351e2C0884e9a5f4416958862" or tx.value == "10000000000"
end
`
		got, _ := validate(rules, tx)
		want := true
		if !reflect.DeepEqual(got, want) {
			t.Errorf("validate = %v, want %v", got, want)
		}
	})

	t.Run("Can invalidate a transaction", func(t *testing.T) {
		tx := types.NewTransaction(
			1,
			common.HexToAddress("0x5597285BbE81BaF351e2C0884e9a5f4416958861"),
			big.NewInt(1),
			21000,
			big.NewInt(10000000000),
			[]byte("abcd"),
		)

		rules := `
function validate(tx)
	return tx.to == "0x5597285BbE81BaF351e2C0884e9a5f4416958862" or tx.value == "10000000000"
end
`
		got, _ := validate(rules, tx)
		want := false
		if !reflect.DeepEqual(got, want) {
			t.Errorf("validate = %v, want %v", got, want)
		}
	})

	t.Run("Can filter on data field", func(t *testing.T) {
		tx := types.NewContractCreation(
			1,
			big.NewInt(0),
			21000,
			big.NewInt(10000000000),
			common.Hex2Bytes("608060405234801561001057600080fd5b5060408051808201909152600c8082527f68656c6c6f20776f726c6421000000000000000000000000000000000000000060209092019182526100559160009161005b565b506100f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009c57805160ff19168380011785556100c9565b828001600101855582156100c9579182015b828111156100c95782518255916020019190600101906100ae565b506100d59291506100d9565b5090565b6100f391905b808211156100d557600081556001016100df565b90565b610365806101056000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063368b87721461003b578063e21f37ce146100e3575b600080fd5b6100e16004803603602081101561005157600080fd5b81019060208101813564010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460018302840111640100000000831117156100a057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610160945050505050565b005b6100eb610210565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012557818101518382015260200161010d565b50505050905090810190601f1680156101525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b805161017390600090602084019061029e565b50604080516020808252835181830152835133937f2ef3fc8a662077a0e040f48a65ffa7573c31f49d3f910d11faaebafb4024c6529386939092839283019185019080838360005b838110156101d35781810151838201526020016101bb565b50505050905090810190601f1680156102005780820380516001836020036101000a031916815260200191505b509250505060405180910390a250565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102965780601f1061026b57610100808354040283529160200191610296565b820191906000526020600020905b81548152906001019060200180831161027957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102df57805160ff191683800117855561030c565b8280016001018555821561030c579182015b8281111561030c5782518255916020019190600101906102f1565b5061031892915061031c565b5090565b61033691905b808211156103185760008155600101610322565b9056fea165627a7a72305820a9ef249bf31d8f35838cabe1e58664dd84b47baf7830cda567c5e7ae48ee5b320029"),
		)

		rules := `
		bytecode = "608060405234801561001057600080fd5b5060408051808201909152600c8082527f68656c6c6f20776f726c6421000000000000000000000000000000000000000060209092019182526100559160009161005b565b506100f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009c57805160ff19168380011785556100c9565b828001600101855582156100c9579182015b828111156100c95782518255916020019190600101906100ae565b506100d59291506100d9565b5090565b6100f391905b808211156100d557600081556001016100df565b90565b610365806101056000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063368b87721461003b578063e21f37ce146100e3575b600080fd5b6100e16004803603602081101561005157600080fd5b81019060208101813564010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460018302840111640100000000831117156100a057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610160945050505050565b005b6100eb610210565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012557818101518382015260200161010d565b50505050905090810190601f1680156101525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b805161017390600090602084019061029e565b50604080516020808252835181830152835133937f2ef3fc8a662077a0e040f48a65ffa7573c31f49d3f910d11faaebafb4024c6529386939092839283019185019080838360005b838110156101d35781810151838201526020016101bb565b50505050905090810190601f1680156102005780820380516001836020036101000a031916815260200191505b509250505060405180910390a250565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102965780601f1061026b57610100808354040283529160200191610296565b820191906000526020600020905b81548152906001019060200180831161027957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102df57805160ff191683800117855561030c565b8280016001018555821561030c579182015b8281111561030c5782518255916020019190600101906102f1565b5061031892915061031c565b5090565b61033691905b808211156103185760008155600101610322565b9056fea165627a7a72305820a9ef249bf31d8f35838cabe1e58664dd84b47baf7830cda567c5e7ae48ee5b320029"

		function string.starts(String,Start)
			 return string.sub(String,1,string.len(Start))==Start
		end

		function validate(tx)
			return tx.to == nil and tx.value == "0" and string.starts(tx.data, bytecode)
		end
`
		got, _ := validate(rules, tx)
		want := true
		if !reflect.DeepEqual(got, want) {
			t.Errorf("validate = %v, want %v", got, want)
		}
	})

}
